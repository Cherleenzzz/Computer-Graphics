function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Ray Tracer';
	UI.titleShort = 'RayTracerSimple';
	UI.numFrames = 1000;
	UI.maxFPS = 24;
	UI.renderWidth = 800;
	UI.renderHeight = 400;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `RaytracingDemoFS - GL`,
		id: `RaytracingDemoFS`,
		initialValue: `#define SOLUTION_CYLINDER_AND_PLANE
#define SOLUTION_MATERIAL
#define SOLUTION_SHADOW
#define SOLUTION_REFLECTION_REFRACTION
#define SOLUTION_FRESNEL

precision highp float;
uniform float time;

struct PointLight {
    vec3 position;
    vec3 color;
};

struct Material {
    vec3  diffuse;
    vec3  specular;
    float glossiness;
#ifdef SOLUTION_MATERIAL
	// Put the variables for reflection and refraction here
	// Reflectance of material
	float reflection;
	// Index of refraction
	float refraction;
#endif
};

struct Sphere {
    vec3 position;
    float radius;
    Material material;
};

struct Plane {
    vec3 normal;
    float d;
    Material material;
};

struct Cylinder {
    vec3 position;
    vec3 direction;  
    float radius;
    Material material;
};

const int lightCount = 2;
const int sphereCount = 3;
const int planeCount = 1;
const int cylinderCount = 2;

struct Scene {
    vec3 ambient;
    PointLight[lightCount] lights;
    Sphere[sphereCount] spheres;
    Plane[planeCount] planes;
    Cylinder[cylinderCount] cylinders;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

// Contains all information pertaining to a ray/object intersection
struct HitInfo {
    bool hit;
    float t;
    vec3 position;
    vec3 normal;
    Material material;
};

HitInfo getEmptyHit() {
	return HitInfo(
      	false, 
      	0.0, 
      	vec3(0.0), 
      	vec3(0.0), 
#ifdef SOLUTION_MATERIAL
		// Update the constructor call
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0)
#else
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0)
#endif
	);
}

// Sorts the two t values such that t1 is smaller than t2
void sortT(inout float t1, inout float t2) {
  	// Make t1 the smaller t
    if (t2 < t1) {
		float temp = t1;
		t1 = t2;
		t2 = temp;
    }
}

// Tests if t is in an interval
bool isTInInterval(const float t, const float tMin, const float tMax) {
	return t > tMin && t < tMax;
}

// Get the smallest t in an interval
bool getSmallestTInInterval(float t0, float t1, const float tMin, const float tMax, inout float smallestTInInterval) {
	sortT(t0, t1);
	// As t0 is smaller, test this first
	if (isTInInterval(t0, tMin, tMax)) {
		smallestTInInterval = t0;
        return true;
	}
  
	// If t0 was not in the interval, still t1 could be
	if (isTInInterval(t1, tMin, tMax)) {
		smallestTInInterval = t1;
		return true;
	}  
	// None was
	return false;
}

HitInfo intersectSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {
              
    vec3 to_sphere = ray.origin - sphere.position;
 
    float a = dot(ray.direction, ray.direction);
	float b = 2.0 * dot(ray.direction, to_sphere);
    float c = dot(to_sphere, to_sphere) - sphere.radius * sphere.radius;
    float D = b * b - 4.0 * a * c;
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      

      	vec3 normal = 
			length(ray.origin - sphere.position) < sphere.radius + 0.001 ? 
          	-normalize(hitPosition-sphere.position) : 
      		normalize(hitPosition-sphere.position);      

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	sphere.material
        );
    }
    return getEmptyHit();
}

HitInfo intersectPlane(const Ray ray,const Plane plane, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// Add your plane intersection code here
	// Plane: p0*n+d=0 Ray: p1+t*v
	float a=dot(ray.origin, plane.normal);
	float b=plane.d;
	float c=dot(ray.direction, plane.normal);
	// Check whether ray and plane have intersetion or not.
	// If c=0, it means that ray.direction is perpendicular to plane.normal and ray.direction is paralle to the plane. So, ray and plane have no intersections.
	if(c!=0.0)
	{
		// t0=t1, because the intersection of ray and plane cannnot more than one.
		float t0=-(a+b)/c;
	    float t1=-(a+b)/c;
		
		float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
    vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      
	vec3 normal=normalize(plane.normal);
	return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	plane.material
        );
	}
	return getEmptyHit();
#endif  
    return getEmptyHit();
}

float lengthSquared(vec3 x) {
	return dot(x, x);
}

HitInfo intersectCylinder(const Ray ray, const Cylinder cylinder, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// Add your cylinder intersection code here
	//(q-p0-pd(q-p0)pd)^2-r^2=0 q=p1+t*v p0=cylinder.position pd=cylinder.direction
	vec3 to_cylinder=ray.origin-cylinder.position;
	vec3 m=ray.direction-dot(cylinder.direction,ray.direction)*cylinder.direction;
	vec3 n=to_cylinder-dot(cylinder.direction,to_cylinder)*cylinder.direction;
	float a=dot(m,m);
	float b=2.0*dot(m,n);
	float c=dot(n,n)-cylinder.radius*cylinder.radius;
	float D = b * b - 4.0 * a * c;
	// Check whether ray and cylinder have intersetion or not.
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
	
    // We only need the smallest t, so we sort the smallest t by the function below.
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      

      	vec3 normal = 
			length(to_cylinder-dot(cylinder.direction,to_cylinder)*cylinder.direction) < cylinder.radius + 0.001 ? 
          	-normalize(hitPosition - cylinder.position-dot(cylinder.direction,hitPosition - cylinder.position)*cylinder.direction ): 
      		normalize(hitPosition - cylinder.position-dot(cylinder.direction,hitPosition - cylinder.position)*cylinder.direction );      

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	cylinder.material
        );
    }
    return getEmptyHit();
#endif  
    return getEmptyHit();
}

HitInfo getBetterHitInfo(const HitInfo oldHitInfo, const HitInfo newHitInfo) {
	if(newHitInfo.hit)
  		if(newHitInfo.t < oldHitInfo.t)  // No need to test for the interval, this has to be done per-primitive
          return newHitInfo;
  	return oldHitInfo;
}

HitInfo intersectScene(const Scene scene, const Ray ray, const float tMin, const float tMax) {
	HitInfo bestHitInfo;
	bestHitInfo.t = tMax;
	bestHitInfo.hit = false;
	for (int i = 0; i < cylinderCount; ++i) {
    	bestHitInfo = getBetterHitInfo(bestHitInfo, intersectCylinder(ray, scene.cylinders[i], tMin, tMax));
	}
	for (int i = 0; i < sphereCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectSphere(ray, scene.spheres[i], tMin, tMax));
	}
	for (int i = 0; i < planeCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectPlane(ray, scene.planes[i], tMin, tMax));
	}
  
	return bestHitInfo;
}

vec3 shadeFromLight(
	const Scene scene,
	const Ray ray,
	const HitInfo hit_info,
	const PointLight light)
{ 
	vec3 hitToLight = light.position - hit_info.position;
  
	vec3 lightDirection = normalize(hitToLight);
	vec3 viewDirection = normalize(hit_info.position - ray.origin);
	vec3 reflectedDirection = reflect(viewDirection, hit_info.normal);
	float diffuse_term = max(0.0, dot(lightDirection, hit_info.normal));
	float specular_term  = pow(max(0.0, dot(lightDirection, reflectedDirection)), hit_info.material.glossiness);

#ifdef SOLUTION_SHADOW
	// Put your shadow test here
	float visibility=1.0;
    Ray lightRay;
	lightRay.origin=hit_info.position;
	lightRay.direction=lightDirection;
	// We always forget that t cannot be bigger than the length of hitToLight. If t is bigger than the length of hitToLight, the light wil has no intersections with objects and there will be some errors appearing.
	HitInfo lightHitInfo=intersectScene(scene,lightRay,0.001,length(hitToLight));
	// Check whether the light and objects have intersection. If have, shawdows should appear and visibility should be zero.
	if(lightHitInfo.hit){
	   visibility=0.0;
	}
#else
  	float visibility = 1.0;
#endif
  
	Ray mirrorRay;
	mirrorRay.origin = hit_info.position;
	mirrorRay.direction = reflect(lightDirection, hit_info.normal);
	HitInfo mirrorHitInfo = intersectScene(scene, mirrorRay, 0.001, 100000.0);
     
  return visibility * 
		light.color * (
		specular_term * hit_info.material.specular +
		diffuse_term * hit_info.material.diffuse);
}

vec3 background(const Ray ray) {
	// A simple implicit sky that can be used for the background
	return vec3(0.2) + vec3(0.8, 0.6, 0.5) * max(0.0, ray.direction.y);
}

// It seems to be a WebGL issue that the third parameter needs to be inout instea dof const on Tobias' machine
vec3 shade(const Scene scene, const Ray ray, inout HitInfo hitInfo) {

  	if(!hitInfo.hit) {
		return background(ray);
  	}
  
    vec3 shading = scene.ambient * hitInfo.material.diffuse;
    for (int i = 0; i < lightCount; ++i) {
		shading += shadeFromLight(scene, ray, hitInfo, scene.lights[i]); 
    }
    return shading;
}


Ray getFragCoordRay(const vec2 frag_coord) {
	float sensorDistance = 1.0;
  	vec2 sensorMin = vec2(-1, -0.5);
  	vec2 sensorMax = vec2(1, 0.5);
  	vec2 pixelSize = (sensorMax- sensorMin) / vec2(800, 400);
  	vec3 origin = vec3(0, 0, sensorDistance);
    vec3 direction = normalize(vec3(sensorMin + pixelSize * frag_coord, -sensorDistance));  
  
  	return Ray(origin, direction);
}

float fresnel(const vec3 viewDirection, const vec3 normal, const float n1, const float n2) {
#ifdef SOLUTION_FRESNEL
	// Put your code to compute the Fresnel effect here
	// Schlick’s approximation
	float FScale=pow((n1-n2)/(n1+n2),2.0);
	float costheta=dot(-viewDirection,normal);
	return (FScale+(1.0-FScale)*pow((1.0-costheta),5.0));
#else
	return 1.0;
#endif
}

vec3 colorForFragment(const Scene scene, const vec2 fragCoord) {
      
    Ray initialRay = getFragCoordRay(fragCoord);  
  	HitInfo initialHitInfo = intersectScene(scene, initialRay, 0.001, 10000.0);  
  	vec3 result = shade(scene, initialRay, initialHitInfo);
	
  	Ray currentRay;
  	HitInfo currentHitInfo;
  	
  	// Compute the reflection
  	currentRay = initialRay;
  	currentHitInfo = initialHitInfo;
  	
  	// The initial strength of the reflection
  	float reflectionWeight = 1.0;
	
  	
  	const int maxReflectionStepCount = 2;
  	for (int i = 0; i < maxReflectionStepCount; i++) {
		if (!currentHitInfo.hit) break;
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		// Put your reflection weighting code here
		reflectionWeight*=currentHitInfo.material.reflection;
#endif
      
#ifdef SOLUTION_FRESNEL
		// Add Fresnel contribution
		reflectionWeight *=fresnel(currentRay.direction, currentHitInfo.normal,1.0,currentHitInfo.material.refraction);
#else
		reflectionWeight *= 0.5;
#endif
      
		Ray nextRay;
#ifdef SOLUTION_REFLECTION_REFRACTION
		// Put your code to compute the reflection ray here
		nextRay.origin=currentHitInfo.position;
		// Reflect function
		nextRay.direction=reflect(normalize(currentRay.direction), normalize(currentHitInfo.normal));
#endif
		currentRay = nextRay; 
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);             
		result += reflectionWeight * shade(scene, currentRay, currentHitInfo);
    }
  
	// Compute the refraction
	currentRay = initialRay;  
	currentHitInfo = initialHitInfo;
   
  	// The initial medium is air
  	float currentIOR = 1.0;
  	// The initial strength of the refraction.
  	float refractionWeight = 1.0;
	
  
  	const int maxRefractionStepCount = 2;
  	for(int i = 0; i < maxRefractionStepCount; i++) {
        
#ifdef SOLUTION_REFLECTION_REFRACTION
		// Put your refraction weighting code here
		// The ratio of indices of refraction
		float eta=1.0/currentHitInfo.material.refraction;
		if(currentHitInfo.material.refraction==0.0){
			refractionWeight=0.0;
		}else{
			refractionWeight*=1.0/currentHitInfo.material.refraction;
		}
#else
		refractionWeight *= 0.5;      
#endif

#ifdef SOLUTION_FRESNEL
		// Add Fresnel contribution
		refractionWeight *=(1.0-fresnel(currentRay.direction, currentHitInfo.normal, 1.0, currentHitInfo.material.refraction));
#endif      

		Ray nextRay;
#ifdef SOLUTION_REFLECTION_REFRACTION      
		// Put your code to compute the reflection ray and track the IOR
		nextRay.origin=currentHitInfo.position;
		nextRay.direction=refract(normalize(currentRay.direction), normalize(currentHitInfo.normal), eta);
#endif
        currentRay=nextRay;
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);   
		result += refractionWeight * shade(scene, currentRay, currentHitInfo);
		if (!currentHitInfo.hit) break;
	}
	return result;
}
// The diffuse material vector defines the color of the object under diffuse lighting. The diffuse color is set to the desired object's color. The specular material vector sets the color impact a specular light has on the object. Lastly, the glossiness impacts the scattering/radius of the specular highlight. I found a website: http://www.it.hiof.no/~borres/j3d/explain/light/p-materials.html as my reference.
Material getDefaultMaterial() {
#ifdef SOLUTION_MATERIAL
	// Update the default material call to match the new parameters of Material
	return Material(vec3(0.3), vec3(0), 1.0, 0.0, 0.0);
#else
	return Material(vec3(0.3), vec3(0), 1.0, 0.0, 0.0);
#endif
}

Material getPaperMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a paper material
  	return Material(vec3(1.0,0.829,0.829), vec3(0.296648,0.296648,0.296648), 3.0, 0.0, 0.0);
#else
    return getDefaultMaterial();
#endif
}

Material getPlasticMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a plastic material
	return Material(vec3(0.7, 0.14, 0.0), vec3(0.6,0.6,0.6), 10.0, 0.7, 1.5);
#else
  	return getDefaultMaterial();
#endif
}

Material getGlassMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a glass material
  	return Material(vec3(0.0), vec3(0.0, 0.0, 0.0), 10.0, 0.2, 1.25);
#else
	return getDefaultMaterial();
#endif
}

Material getSteelMirrorMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a steel mirror material
  	return Material(vec3(0.1), vec3(0.8, 0.5, 0.5), 10.0, 0.6, 0.0);
#else
	return getDefaultMaterial();
#endif
}

vec3 tonemap(const vec3 radiance) {
	const float monitorGamma = 2.0;
	return pow(radiance, vec3(1.0 / monitorGamma));
}

void main()
{
    // Setup scene
	Scene scene;
  	scene.ambient = vec3(0.12, 0.15, 0.2);
  
    // Lights
    scene.lights[0].position = vec3(5, 15, -5);
    scene.lights[0].color    = 0.5 * vec3(0.9, 0.5, 0.1);
    
  	scene.lights[1].position = vec3(-15, 5, 2);
    scene.lights[1].color    = 0.5 * vec3(0.1, 0.3, 1.0);
  
    // Primitives
    scene.spheres[0].position            	= vec3(10, -5, -16);
    scene.spheres[0].radius              	= 6.0;
    scene.spheres[0].material 				= getPaperMaterial();
    
  	scene.spheres[1].position            	= vec3(-7, -1, -13);
    scene.spheres[1].radius             	= 4.0;
    scene.spheres[1].material				= getPlasticMaterial();
  
    scene.spheres[2].position            	= vec3(0, 0.5, -5);
    scene.spheres[2].radius              	= 2.0;
    scene.spheres[2].material   			= getGlassMaterial();

  	scene.planes[0].normal            		= vec3(0, 1, 0);
  	scene.planes[0].d              			= 4.5;
    scene.planes[0].material				= getSteelMirrorMaterial();
  
  	scene.cylinders[0].position            	= vec3(-1, 1, -18);
  	scene.cylinders[0].direction            = normalize(vec3(-1, 2, -1));
  	scene.cylinders[0].radius         		= 1.5;
    scene.cylinders[0].material				= getPaperMaterial();
  
  	scene.cylinders[1].position            	= vec3(4, 1, -5);
  	scene.cylinders[1].direction            = normalize(vec3(1, 4, 1));
  	scene.cylinders[1].radius         		= 0.4;
    scene.cylinders[1].material				= getPlasticMaterial();

	// compute color for fragment
	gl_FragColor.rgb = tonemap(colorForFragment(scene, gl_FragCoord.xy));
	gl_FragColor.a = 1.0;

}
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RaytracingDemoVS - GL`,
		id: `RaytracingDemoVS`,
		initialValue: `attribute vec3 position;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("experimental-webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

    console.log(str);
	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}

function RaytracingDemo() {
}

RaytracingDemo.prototype.initShaders = function() {

	this.shaderProgram = gl.createProgram();

	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoVS"));
	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoFS"));
	gl.linkProgram(this.shaderProgram);

	if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
		alert("Could not initialise shaders");
	}

	gl.useProgram(this.shaderProgram);

	this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
	gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

	this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
	this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RaytracingDemo.prototype.initBuffers = function() {
	this.triangleVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	
	var vertices = [
		 -1,  -1,  0,
		 -1,  1,  0,
		 1,  1,  0,

		 -1,  -1,  0,
		 1,  -1,  0,
		 1,  1,  0,
	 ];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	this.triangleVertexPositionBuffer.itemSize = 3;
	this.triangleVertexPositionBuffer.numItems = 3 * 2;
}

function getTime() {
	var d = new Date();
	return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}

RaytracingDemo.prototype.drawScene = function() {
			
	var perspectiveMatrix = new J3DIMatrix4();	
	perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

	var modelViewMatrix = new J3DIMatrix4();	
	modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);

	gl.uniform1f(gl.getUniformLocation(this.shaderProgram, "time"), getTime());
		
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	
	gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RaytracingDemo.prototype.run = function() {
	this.initShaders();
	this.initBuffers();

	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT);

	this.drawScene();
};

function init() {	
	

	env = new RaytracingDemo();	
	env.run();

    return env;
}

function compute(canvas)
{
    env.initShaders();
    env.initBuffers();

    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);

    env.drawScene();
}
